// Relative divide function
relativeDivide= {|x, y|  // x / y 
  epsilon = 10^(-8)
  xs = SampleSet.toList(SampleSet.fromDist(x))
  ys = SampleSet.toList(SampleSet.fromDist(y))
  l = List.length(xs)
  ls = List.upTo(0, l-1)
  acc_init = {
    minus_infinity: 0,
    plus_infinity: 0,
    zero_over_zero: 0,
    samples: [],
  }
  relative_values_unprocessed = List.reduce(ls, acc_init, 
    {|acc, li| 
      s1 = xs[li]
      s2 = ys[li]
      new_acc = (
        if abs(s2)<epsilon then {
          (
            if abs(s1)<epsilon then {
              {
                minus_infinity: acc.minus_infinity,
                plus_infinity: acc.plus_infinity,
                zero_over_zero: acc.zero_over_zero + 1,
                samples: acc.samples,
              }
            } else {
              {
                minus_infinity: acc.minus_infinity + (s1 < 0 ? 1 : 0),
                plus_infinity: acc.plus_infinity + (s1 > 0 ? 1 : 0),
                zero_over_zero: acc.zero_over_zero,
                samples: acc.samples,
              }
            }
          )

        } else {
          n = List.length(acc.samples)
          helper_list = List.upTo(0, n) 
          // ^ n+1 items, so space for one more
          new_sample = s1 / s2
          new_samples = List.map(helper_list, {|i|
            i < n ? acc.samples[i] : new_sample
          })
          {
            minus_infinity: acc.minus_infinity,
            plus_infinity: acc.plus_infinity,
            zero_over_zero: acc.zero_over_zero,
            samples: new_samples,
          }
        }
      )
      new_acc
  })
  num_deviant_samples = 
    relative_values_unprocessed.minus_infinity +
    relative_values_unprocessed.plus_infinity +
    relative_values_unprocessed.zero_over_zero
  relative_values_processed = ({
    minus_infinity: relative_values_unprocessed.minus_infinity / l,
    plus_infinity: relative_values_unprocessed.plus_infinity / l,
    zero_over_zero: relative_values_unprocessed.zero_over_zero / l,
    standard_dist: SampleSet.fromList(relative_values_unprocessed.samples),
    p_standard_dist: 1-(num_deviant_samples)/l,
  })
  relative_values_processed
  
}



getRelativeValues = {|intervention_1, intervention_2|
  if intervention_1.id == intervention_2.id then {
    {
      meta: {
        numerator: intervention_1.name,
        denominator: intervention_2.name
      },
      relative_value: 1,
    }
  } else {
    {
      meta: {
        numerator: intervention_1.name,
        denominator: intervention_2.name
      },
      ratio_of_means: mean(intervention_1.value)/mean(intervention_2.value),
      relative_value: relativeDivide(intervention_1.value, intervention_2.value),
    }
  }
}

{
  divide: relativeDivide,
  values: getRelativeValues
}